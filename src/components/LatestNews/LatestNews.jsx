
import { getLatestNews } from '../../api/apiNews';
import { useFetch } from '../../helpers/hooks/useFetch';
import BannersList from '../BannerList/BannerList';
import styles from './styles.module.css';

export default function LatestNews() {
    // Данный код - это деструктурирующее присваивание. В данном случаем - это деструктуризация объекта. 
    // Он может работать с объектами и массивами и будет называться дуструктуризация массива.

    // Функция возвращает объект с определёнными свойствами. И если нам нужно определённое свойство,
    // то при помощи деструктуризации можно записать интересующее нас свойство и получить его.

    // Названия свойства из возвращаемого объекта и название переменной в которой мы хотит сохранить
    // значение свойства должны совпадать, так как мы обращаемся к свойству возвращаемого объекта.
    const {data, isLoading} = useFetch(getLatestNews);

    return (
        <section className={ styles.section }>
            {/* 
                Это пример использования оператора "логическое И".
                Этот оператор возвращает первое ложное значение, с котороым он сталкивается,
                или последнее истинное, если все опернды истинны.

                Что делает код?
                1.Сначало проверяется, является ли data истинным значением. Если data - это null, 
                undefined, false, или другое ложное значение, то результатом будем сам data.
                2.Если data истинно (например, объект илии непустая строка), то будет выполнена проверка второго
                операнда - data.news В таком случае результатом будет значение свойства news, если оно 
                существует, или undefined, если его нет.

                Данный синтаксис применяется, чтобы безопасно обращаться к вложенным свойствам объектов.
                Если не использовать такую проверку и попытаться получить совйство у занчение null или undefined,
                JS выбросит ошибку.
            */}
            <BannersList banners={ data && data.news } isLoading={ isLoading } />
        </section>
    );
}
